services:
  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mdc_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: "postgresql://mpix_user:mpix_password@postgres:5432/mpix_db?schema=public"
      JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-super-secret-refresh-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "http.get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - mdc_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mdc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mpix_db
      POSTGRES_USER: mpix_user
      POSTGRES_PASSWORD: mpix_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mpix_user -d mpix_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mdc_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mdc_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mdc_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mdc_network:
    driver: bridge
