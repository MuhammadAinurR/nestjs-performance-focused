# ========================================
# MDC Backend Environment Configuration
# ========================================
# Copy this file to .env and update the values according to your setup
# 
# SETUP MODES:
# 1. DEVELOPMENT MODE: Only database and Redis in Docker, app runs locally
# 2. PRODUCTION MODE: Complete stack (app + database + Redis) in Docker
# ========================================

# ========================================
# Application Configuration
# ========================================
NODE_ENV=development
PORT=3000
APP_VERSION=0.1.0

# ========================================
# DEVELOPMENT MODE CONFIGURATION
# ========================================
# Use this configuration when running:
# - make dev (or npm run start:dev)
# - make db-up (starts only database and Redis containers)
# - docker-compose -f docker-compose.dev.yml up -d

# Database Configuration (Development - Docker services only)
# PostgreSQL runs in Docker container, exposed on port 5433
DATABASE_URL="postgresql://mpix_user:mpix_password@localhost:5433/mpix_db?schema=public"

# Redis Configuration (Development - Docker service only) 
# Redis runs in Docker container, exposed on port 6379
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# ========================================
# PRODUCTION MODE CONFIGURATION  
# ========================================
# Use this configuration when running:
# - make docker-up (or docker-compose up -d)
# - Complete application stack in Docker containers

# Database Configuration (Production - Docker internal networking)
# When app runs in Docker, use service names for hostnames
# DATABASE_URL="postgresql://mpix_user:mpix_password@postgres:5432/mpix_db?schema=public"

# Redis Configuration (Production - Docker internal networking)
# When app runs in Docker, use service name for hostname
# REDIS_HOST=redis
# REDIS_PORT=6379
# REDIS_PASSWORD=
# REDIS_DB=0

# ========================================
# LOCAL INSTALLATION CONFIGURATION
# ========================================
# Use this if you have PostgreSQL and Redis installed locally
# (without Docker)

# Local PostgreSQL Database
# DATABASE_URL="postgresql://your_username:your_password@localhost:5432/your_database?schema=public"

# Local Redis
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=your_redis_password
# REDIS_DB=0

# ========================================
# JWT Authentication Configuration
# ========================================
# IMPORTANT: Change these secrets in production!

JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_REFRESH_SECRET=your-super-secret-refresh-jwt-key-change-in-production

# Token Expiration Times
JWT_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# ========================================
# Database Connection Details
# ========================================
# Individual database parameters (used by some tools)

DB_HOST=localhost
DB_PORT=5433
DB_USER=mpix_user
DB_PASSWORD=mpix_password
DB_NAME=mpix_db

# For production Docker (internal networking):
# DB_HOST=postgres
# DB_PORT=5432

# ========================================
# Performance & Security Configuration
# ========================================

# CORS Settings
CORS_ORIGIN=*
CORS_CREDENTIALS=true

# Rate Limiting (per endpoint)
THROTTLE_TTL=60
THROTTLE_LIMIT=100

# Request size limits
MAX_REQUEST_SIZE=10mb

# ========================================
# Development Tools Configuration
# ========================================

# Swagger Documentation
SWAGGER_ENABLED=true
SWAGGER_PATH=docs

# Logging Configuration
LOG_LEVEL=info
LOG_SQL_QUERIES=false

# Hot Reload (development only)
WATCH_MODE=true

# ========================================
# Optional: Advanced Configuration
# ========================================

# Health Check Configuration
HEALTH_CHECK_TIMEOUT=30000
HEALTH_CHECK_INTERVAL=30000

# Performance Testing (for load testing tools)
VUS=10
DURATION=30s
TARGET_URL=http://localhost:3000

# Docker Resource Limits
DOCKER_MEMORY=1g
DOCKER_CPUS=1.0

# ========================================
# Environment-Specific Examples
# ========================================

# Development Example (.env for local development):
# NODE_ENV=development
# DATABASE_URL="postgresql://mpix_user:mpix_password@localhost:5433/mpix_db?schema=public"
# REDIS_HOST=localhost
# REDIS_PORT=6379
# JWT_SECRET=dev-secret-key
# JWT_REFRESH_SECRET=dev-refresh-secret-key

# Production Example (.env for Docker production):
# NODE_ENV=production
# DATABASE_URL="postgresql://mpix_user:mpix_password@postgres:5432/mpix_db?schema=public"
# REDIS_HOST=redis
# REDIS_PORT=6379
# JWT_SECRET=your-strong-production-secret
# JWT_REFRESH_SECRET=your-strong-refresh-secret

# ========================================
# Quick Setup Commands
# ========================================
# 
# For Development Mode:
# 1. Copy this file: cp .env.example .env
# 2. Start services: make db-up
# 3. Setup database: make reroll
# 4. Start app: make dev
#
# For Production Mode:
# 1. Copy this file: cp .env.example .env
# 2. Update JWT secrets and other production values
# 3. Start stack: make docker-up
#
# ========================================
